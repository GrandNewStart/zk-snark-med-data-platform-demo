{"ast":null,"code":"var _jsxFileName = \"/Users/jinwoo/Documents/Repositories/zkp-med-data-platform/front/src/data_reqeust_context.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext(undefined);\nexport const Provider = ({\n  children\n}) => {\n  _s();\n  const [dataRequests, setDataRequests] = useState([]);\n  const [proofs, setProofs] = useState([]);\n  const addDataRequest = item => {\n    setDataRequests(prev => [...prev, item]);\n  };\n  const addProof = item => {\n    setProofs(prev => [...prev, item]);\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      dataRequests,\n      addDataRequest,\n      proofs,\n      addProof\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Provider, \"2JCdSVzabRXaTp99RqVxsIZdEk8=\");\n_c = Provider;\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(Context);\n  if (!context) {\n    throw new Error('useDataRequestContext must be used within a DataRequestProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","Context","undefined","Provider","children","_s","dataRequests","setDataRequests","proofs","setProofs","addDataRequest","item","prev","addProof","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/jinwoo/Documents/Repositories/zkp-med-data-platform/front/src/data_reqeust_context.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { DataRequest } from './types/data_request';\nimport { Proof } from './types/proof';\n\ntype ContextType = {\n  dataRequests: DataRequest[];\n  proofs: Proof[];\n  addDataRequest: (item: DataRequest) => void;\n  addProof: (item: Proof) => void;\n};\n\nconst Context = createContext<ContextType | undefined>(undefined);\n\nexport const Provider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [dataRequests, setDataRequests] = useState<DataRequest[]>([]);\n  const [proofs, setProofs] = useState<Proof[]>([]);\n\n  const addDataRequest = (item: DataRequest) => {\n    setDataRequests((prev) => [...prev, item]);\n  };\n\n  const addProof = (item: Proof) => {\n    setProofs((prev) => [...prev, item]);\n  };\n\n  return (\n    <Context.Provider value={{ dataRequests, addDataRequest, proofs, addProof }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport const useAppContext = (): ContextType => {\n  const context = useContext(Context);\n  if (!context) {\n    throw new Error('useDataRequestContext must be used within a DataRequestProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW9E,MAAMC,OAAO,gBAAGL,aAAa,CAA0BM,SAAS,CAAC;AAEjE,OAAO,MAAMC,QAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAgB,EAAE,CAAC;EACnE,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAU,EAAE,CAAC;EAEjD,MAAMY,cAAc,GAAIC,IAAiB,IAAK;IAC5CJ,eAAe,CAAEK,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,IAAI,CAAC,CAAC;EAC5C,CAAC;EAED,MAAME,QAAQ,GAAIF,IAAW,IAAK;IAChCF,SAAS,CAAEG,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,IAAI,CAAC,CAAC;EACtC,CAAC;EAED,oBACEX,OAAA,CAACC,OAAO,CAACE,QAAQ;IAACW,KAAK,EAAE;MAAER,YAAY;MAAEI,cAAc;MAAEF,MAAM;MAAEK;IAAS,CAAE;IAAAT,QAAA,EACzEA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEvB,CAAC;AAACb,EAAA,CAjBWF,QAA2C;AAAAgB,EAAA,GAA3ChB,QAA2C;AAmBxD,OAAO,MAAMiB,aAAa,GAAGA,CAAA,KAAmB;EAAAC,GAAA;EAC9C,MAAMC,OAAO,GAAGzB,UAAU,CAACI,OAAO,CAAC;EACnC,IAAI,CAACqB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,iEAAiE,CAAC;EACpF;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,aAAa;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}